# --- Logging Utility ---
$LogPath = "E:\Installation Media\Script\OnboardScript\accountonboarding.txt"
Function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "$Timestamp - $Message"
    Write-Host $LogEntry -ForegroundColor $Color
    Add-Content -Path $LogPath -Value $LogEntry
}

# --- Retrieve CyberArk API Credentials from CCP ---
$CCPAddress = "https://vskau1p1231.cna.com"
$location   = "AIMWebService"
$application= "PAMDiscovery"
$safe       = "CA_PCloud_Admins"
$object     = "cna-prod.cyberark.cloud-cnarestbot@cyberark.cloud.6679"

$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Content-Type", "application/json")
$windowsAuth = $false

Write-Log "Retrieving CyberArk API credentials from CCP via Object method..." "Cyan"
$ccpUrl = "$CCPAddress/$location/api/Accounts?AppID=$application&Safe=$safe&Object=$object"
try {
    $response = Invoke-RestMethod $ccpUrl -Method 'GET' -Headers $headers -UseDefaultCredentials:$windowsAuth
    if (-not $response -or -not $response.Username -or -not $response.Content) {
        Write-Log "ERROR: Failed to retrieve API credentials from CCP." "Red"
        exit 1
    }
    Write-Log "Successfully retrieved credentials for user: $($response.Username)" "Green"
} catch {
    Write-Log "ERROR: CCP credential fetch failed - $_" "Red"
    exit 1
}
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Import psPAS Module
Import-Module psPAS

# Prompt user for CyberArk credentials
$UPCred = Get-Credential

# Get header authentication (PCLOUD Admins Only)
$header = Get-IdentityHeader -IdentityTenantURL "aat4012.id.cyberark.cloud" -psPASFormat -PCloudSubdomain "cna-prod" -UPCreds $UPCred

# Register to use header credentials for PAS session
Use-PASSession $header

# Define CSV file path
$csvFilePath = "E:\Installation Media\RemovePendingAccount\UpdateSafesParameters.csv"
# Define log file path
$logFilePath = "E:\Installation Media\RemovePendingAccount\UpdateLog.txt"

# Import the CSV file for modification
$updatedSafes = Import-Csv -Path $csvFilePath

# Create or clear log file
New-Item -ItemType File -Path $logFilePath -Force | Out-Null

# Iterate through each safe and update parameters
foreach ($safe in $updatedSafes) {
    try {
        # Validate that required fields are not empty
        if ([string]::IsNullOrWhiteSpace($safe.safeName)) {
            throw "SafeName cannot be empty."
        }
        if ([string]::IsNullOrWhiteSpace($safe.managingCPM)) {
            throw "ManagingCPM cannot be empty."
        }
        
        # Convert Boolean values properly
        $olacEnabled = if ($safe.olacEnabled -match "(?i)true") { $true } else { $false }

        # Construct parameters for Set-PASSafe
        $params = @{
            SafeName = $safe.safeName
            ManagingCPM = $safe.managingCPM
            NumberOfDaysRetention      = 180  # Defaulting to 180 days
            OLACEnabled                = $olacEnabled
        }

        # Only add Location if it's not empty
        if (-not [string]::IsNullOrWhiteSpace($safe.location)) {
            $params["Location"] = $safe.location
        }

        # Update the safe
        Set-PASSafe @params
        
        $successMessage = "[SUCCESS] Safe '$($safe.safeName)' updated successfully."
        Write-Output $successMessage
        Add-Content -Path $logFilePath -Value $successMessage
    } catch {
        $errorMessage = "[ERROR] Failed to update safe '$($safe.safeName)'. Error: $_"
        Write-Output $errorMessage
        Add-Content -Path $logFilePath -Value $errorMessage
    }
}
