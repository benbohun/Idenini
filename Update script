# =========================
# CCP -> psPAS (no prompts) -> Update Safes
# =========================
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
$ProgressPreference = 'SilentlyContinue'

# --- Logging ---
$LogFile = "E:\Installation Media\Script\OnboardScript\UpdateSafeVersion\UpdateSafes.log"
New-Item -ItemType File -Force -Path $LogFile | Out-Null
function Write-Log([string]$Message, [ConsoleColor]$Color='White'){
  $ts = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
  $line = "$ts - $Message"
  Write-Host $line -ForegroundColor $Color
  Add-Content -Path $LogFile -Value $line
}

# --- Retrieve API creds from CCP (Object method) ---
$CCPAddress  = "https://vskau1p1231.cna.com"
$location    = "AIMWebService"
$application = "PAMDiscovery"
$safe        = "CA_PCloud_Admins"
$object      = "cna.com-CA_PAMDiscovery_SVC"
$ccpUrl      = "$CCPAddress/$location/api/Accounts?AppID=$application&Safe=$safe&Object=$object"

Write-Log "Fetching credentials from CCP: AppID=$application, Safe=$safe, Object=$object" Cyan
$response = Invoke-RestMethod -Uri $ccpUrl -Method GET -Headers @{ 'Content-Type'='application/json' }

if (-not $response -or -not $response.Username -or -not $response.Content){
  Write-Log "ERROR: CCP response missing Username/Content." Red; exit 1
}
Write-Log "CCP returned username '$($response.Username)'." Green

# --- Build PSCredential from CCP secret (no prompt) ---
$securePwd = ConvertTo-SecureString -String $response.Content -AsPlainText -Force
$UPCred    = New-Object System.Management.Automation.PSCredential ($response.Username, $securePwd)

# --- psPAS authentication (Identity header) ---
Import-Module psPAS -ErrorAction Stop
$IdentityTenantURL = "aat4012.id.cyberark.cloud"
$PCloudSubdomain   = "cna-prod"

Write-Log "Obtaining Identity header for '$IdentityTenantURL' (subdomain '$PCloudSubdomain')." Cyan
$header = Get-IdentityHeader -IdentityTenantURL $IdentityTenantURL -psPASFormat -PCloudSubdomain $PCloudSubdomain -UPCreds $UPCred
Use-PASSession $header
Write-Log "PAS session established using CCP credentials (no user prompt)." Green

# --- Inputs/Outputs ---
$csvFilePath = "E:\Installation Media\RemovePendingAccount\UpdateSafesParameters.csv"
$opLogFile   = "E:\Installation Media\RemovePendingAccount\UpdateLog.txt"
New-Item -ItemType File -Force -Path $opLogFile | Out-Null

Write-Log "Loading CSV: $csvFilePath" Cyan
$rows = Import-Csv -Path $csvFilePath

# --- Update each safe ---
foreach($row in $rows){
  try{
    $safeName    = $row.safeName
    $managingCPM = $row.managingCPM
    if([string]::IsNullOrWhiteSpace($safeName)){ throw "SafeName is required." }
    if([string]::IsNullOrWhiteSpace($managingCPM)){ throw "ManagingCPM is required." }

    $olacEnabled = $false
    if($row.olacEnabled -match '^(?i:true|1|yes|y)$'){ $olacEnabled = $true }

    $params = @{
      SafeName              = $safeName
      ManagingCPM           = $managingCPM
      NumberOfDaysRetention = 180
      OLACEnabled           = $olacEnabled
    }
    if(-not [string]::IsNullOrWhiteSpace($row.location)){ $params['Location'] = $row.location }

    Write-Log "Updating '$safeName' (CPM='$managingCPM', OLAC=$olacEnabled, Location='$($row.location)')" Yellow
    Set-PASSafe @params

    $msg = "[SUCCESS] $safeName updated."
    Add-Content -Path $opLogFile -Value $msg
    Write-Host $msg -ForegroundColor Green
  } catch {
    $err = "[ERROR] $safeName : $($_.Exception.Message)"
    Add-Content -Path $opLogFile -Value $err
    Write-Host $err -ForegroundColor Red
    continue
  }
}

Write-Log "Completed. See '$opLogFile' for per-item results." Green
